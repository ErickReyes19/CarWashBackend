// <auto-generated />
using System;
using CarWashBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarWashBackend.Migrations
{
    [DbContext(typeof(CarwashContext))]
    partial class CarwashContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CarWashBackend.Models.Cliente", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("correo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("genero")
                        .HasColumnType("enum('Masculino','Femenino','Otro')");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("telefono")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "correo" }, "correo")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("CarWashBackend.Models.Empleado", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("correo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("edad")
                        .HasColumnType("int");

                    b.Property<string>("genero")
                        .HasColumnType("enum('Masculino','Femenino','Otro')");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "correo" }, "correo1")
                        .IsUnique();

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("CarWashBackend.Models.EstadosServicio", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.ToTable("EstadosServicios");
                });

            modelBuilder.Entity("CarWashBackend.Models.Pago", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("metodo_pago")
                        .IsRequired()
                        .HasColumnType("enum('Efectivo','Tarjeta','Transferencia')");

                    b.Property<decimal>("monto")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("registro_servicio_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "registro_servicio_id" }, "registro_servicio_id");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("CarWashBackend.Models.Permiso", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "nombre" }, "nombre")
                        .IsUnique();

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("CarWashBackend.Models.RegistroServicio", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("cliente_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("estado_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<string>("servicio_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("usuario_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("vehiculo_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "cliente_id" }, "cliente_id");

                    b.HasIndex(new[] { "estado_id" }, "estado_id");

                    b.HasIndex(new[] { "servicio_id" }, "servicio_id");

                    b.HasIndex(new[] { "usuario_id" }, "usuario_id");

                    b.HasIndex(new[] { "vehiculo_id" }, "vehiculo_id");

                    b.ToTable("RegistroServicios");
                });

            modelBuilder.Entity("CarWashBackend.Models.Role", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CarWashBackend.Models.Servicio", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("CarWashBackend.Models.Usuario", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("empleado_id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("role_id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("usuario1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("usuario");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "role_id" }, "FK_Usuario_Role");

                    b.HasIndex(new[] { "empleado_id" }, "empleado_id");

                    b.HasIndex(new[] { "usuario1" }, "usuario")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CarWashBackend.Models.Vehiculo", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("cliente_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("color")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("marca")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("modelo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("placa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "cliente_id" }, "cliente_id1");

                    b.HasIndex(new[] { "placa" }, "placa")
                        .IsUnique();

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("RolePermiso", b =>
                {
                    b.Property<string>("rol_id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("permiso_id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("rol_id", "permiso_id")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "permiso_id" }, "FK_RolePermisos_Permiso");

                    b.ToTable("RolePermisos", (string)null);
                });

            modelBuilder.Entity("cliente_vehiculo", b =>
                {
                    b.Property<string>("cliente_id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("vehiculo_id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("cliente_id", "vehiculo_id")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "vehiculo_id" }, "fk_vehiculo");

                    b.ToTable("cliente_vehiculo", (string)null);
                });

            modelBuilder.Entity("CarWashBackend.Models.Pago", b =>
                {
                    b.HasOne("CarWashBackend.Models.RegistroServicio", "registro_servicio")
                        .WithMany("Pagos")
                        .HasForeignKey("registro_servicio_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pagos_ibfk_1");

                    b.Navigation("registro_servicio");
                });

            modelBuilder.Entity("CarWashBackend.Models.RegistroServicio", b =>
                {
                    b.HasOne("CarWashBackend.Models.Cliente", "cliente")
                        .WithMany("RegistroServicios")
                        .HasForeignKey("cliente_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RegistroServicios_ibfk_1");

                    b.HasOne("CarWashBackend.Models.EstadosServicio", "estado")
                        .WithMany("RegistroServicios")
                        .HasForeignKey("estado_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RegistroServicios_ibfk_5");

                    b.HasOne("CarWashBackend.Models.Servicio", "servicio")
                        .WithMany("RegistroServicios")
                        .HasForeignKey("servicio_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RegistroServicios_ibfk_3");

                    b.HasOne("CarWashBackend.Models.Usuario", "usuario")
                        .WithMany("RegistroServicios")
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RegistroServicios_ibfk_4");

                    b.HasOne("CarWashBackend.Models.Vehiculo", "vehiculo")
                        .WithMany("RegistroServicios")
                        .HasForeignKey("vehiculo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RegistroServicios_ibfk_2");

                    b.Navigation("cliente");

                    b.Navigation("estado");

                    b.Navigation("servicio");

                    b.Navigation("usuario");

                    b.Navigation("vehiculo");
                });

            modelBuilder.Entity("CarWashBackend.Models.Usuario", b =>
                {
                    b.HasOne("CarWashBackend.Models.Empleado", "empleado")
                        .WithMany("Usuarios")
                        .HasForeignKey("empleado_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Usuario_Empleado");

                    b.HasOne("CarWashBackend.Models.Role", "role")
                        .WithMany("Usuarios")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Usuario_Role");

                    b.Navigation("empleado");

                    b.Navigation("role");
                });

            modelBuilder.Entity("RolePermiso", b =>
                {
                    b.HasOne("CarWashBackend.Models.Permiso", null)
                        .WithMany()
                        .HasForeignKey("permiso_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermisos_Permiso");

                    b.HasOne("CarWashBackend.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("rol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermisos_Rol");
                });

            modelBuilder.Entity("cliente_vehiculo", b =>
                {
                    b.HasOne("CarWashBackend.Models.Cliente", null)
                        .WithMany()
                        .HasForeignKey("cliente_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cliente");

                    b.HasOne("CarWashBackend.Models.Vehiculo", null)
                        .WithMany()
                        .HasForeignKey("vehiculo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehiculo");
                });

            modelBuilder.Entity("CarWashBackend.Models.Cliente", b =>
                {
                    b.Navigation("RegistroServicios");
                });

            modelBuilder.Entity("CarWashBackend.Models.Empleado", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("CarWashBackend.Models.EstadosServicio", b =>
                {
                    b.Navigation("RegistroServicios");
                });

            modelBuilder.Entity("CarWashBackend.Models.RegistroServicio", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("CarWashBackend.Models.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("CarWashBackend.Models.Servicio", b =>
                {
                    b.Navigation("RegistroServicios");
                });

            modelBuilder.Entity("CarWashBackend.Models.Usuario", b =>
                {
                    b.Navigation("RegistroServicios");
                });

            modelBuilder.Entity("CarWashBackend.Models.Vehiculo", b =>
                {
                    b.Navigation("RegistroServicios");
                });
#pragma warning restore 612, 618
        }
    }
}
